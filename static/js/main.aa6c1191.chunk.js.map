{"version":3,"sources":["assets/customizeme_final_color.png","assets/background1.jpg","components/banner.js","components/flatContent.js","components/parallaxBackground.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","customiseMeLogo","require","Logo","styled","img","Banner","strength","bgStyle","top","width","height","renderLayer","percentage","style","position","background","left","borderRadius","transform","zIndex","className","src","Container","div","props","FlatContent","ParallaxBackground","contentHeight","backgroundLogo","App","bgImage","bgImageAlt","bgImageStyle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wLAAAA,EAAOC,QAAU,IAA0B,qD,oCCA3CD,EAAOC,QAAU,IAA0B,yC,4WCK3C,IAAMC,EAAkBC,EAAQ,IAE1BC,EAAOC,IAAOC,IAAV,KA2CKC,MA/Bf,WACE,OACE,6BACE,kBAAC,WAAD,CACEC,SAAU,IACVC,QAAS,CAAEC,IAAK,MAAOC,MAAO,OAAQC,OAAQ,QAC9CC,YAAa,SAACC,GAAD,OACX,yBACEC,MAAO,CACLC,SAAU,WACVC,WAAW,QACXC,KAAM,MACNR,IAAK,MACLS,aAAc,MACdC,UAAW,uBACXT,MAAoB,IAAbG,EACPF,OAAqB,IAAbE,EACRO,OAAQ,QAKd,kBAAC,aAAD,CAAYC,UAAU,cACtB,yBAAKP,MAAO,CAAEH,OAAQ,UACpB,kBAACR,EAAD,CAAMmB,IAAKrB,Q,yGCvCrB,IAAMsB,EAAYnB,IAAOoB,IAAV,KAEH,SAACC,GAAD,OAAWA,EAAMd,UAWde,MARf,SAAqBD,GAAQ,IACnBd,EAAWc,EAAXd,OACR,OAAO,kBAACY,EAAD,CAAWZ,OAAQA,K,+GCL5B,IAAMY,EAAYnB,IAAOoB,IAAV,KAEH,SAACC,GAAD,OAAWA,EAAMd,UAgBdgB,MAbf,SAA4BF,GAAQ,IAC1BG,EAAkBH,EAAlBG,cACR,OACE,kBAAC,WAAD,CAAUrB,SAAU,IAAKC,QAAS,CAAEC,IAAK,MAAOC,MAAO,SACrD,kBAAC,aAAD,CAAYW,UAAU,cACtB,kBAAC,EAAD,CAAWV,OAAQiB,MCZnBC,EAAiB3B,EAAQ,IAmBhB4B,MAjBf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAanB,OAAO,QACpB,kBAAC,WAAD,CACEoB,QAASF,EACTG,WAAW,aACXzB,SAAU,IACV0B,aAAc,CAAExB,IAAK,MAAOC,MAAO,QACnCI,MAAO,CAAEH,OAAQ,QAAS,mBAAoB,SAEhD,kBAAC,EAAD,CAAoBiB,cAAc,UCNpBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aa6c1191.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/customizeme_final_color.5e5a649d.png\";","module.exports = __webpack_public_path__ + \"static/media/background1.63eb2e00.jpg\";","import React from 'react';\r\nimport { Parallax, Background } from 'react-parallax';\r\nimport styled from 'styled-components';\r\nimport './banner.css';\r\n\r\nconst customiseMeLogo = require('../assets/customizeme_final_color.png');\r\n\r\nconst Logo = styled.img`\r\n  height: 100px;\r\n  width: 100px;\r\n  background: transparent;\r\n  padding: 20px;\r\n  position: absolute;\r\n  top: 65%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  z-index: 1000;\r\n`;\r\n\r\nfunction Banner() {\r\n  return (\r\n    <div>\r\n      <Parallax\r\n        strength={700}\r\n        bgStyle={{ top: '50%', width: '100%', height: '100%' }}\r\n        renderLayer={(percentage) => (\r\n          <div\r\n            style={{\r\n              position: 'absolute',\r\n              background: `white`,\r\n              left: '50%',\r\n              top: '65%',\r\n              borderRadius: '50%',\r\n              transform: 'translate(-50%,-50%)',\r\n              width: percentage * 270,\r\n              height: percentage * 270,\r\n              zIndex: 99,\r\n            }}\r\n          />\r\n        )}\r\n      >\r\n        <Background className=\"banner-bg\" />\r\n        <div style={{ height: '400px' }}>\r\n          <Logo src={customiseMeLogo} />\r\n        </div>\r\n      </Parallax>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  height: ${(props) => props.height}px;\r\n`;\r\n\r\nfunction FlatContent(props) {\r\n  const { height } = props;\r\n  return <Container height={height}></Container>;\r\n}\r\nFlatContent.propTypes = {\r\n  height: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default FlatContent;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Parallax, Background } from 'react-parallax';\r\nimport styled from 'styled-components';\r\nimport './parallaxBackground.css';\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  height: ${(props) => props.height}px;\r\n`;\r\n\r\nfunction ParallaxBackground(props) {\r\n  const { contentHeight } = props;\r\n  return (\r\n    <Parallax strength={500} bgStyle={{ top: '35%', width: '100%' }}>\r\n      <Background className=\"custom-bg\" />\r\n      <Container height={contentHeight} />\r\n    </Parallax>\r\n  );\r\n}\r\nParallaxBackground.propTypes = {\r\n  contentHeight: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ParallaxBackground;\r\n","import React from 'react';\nimport { Parallax } from 'react-parallax';\nimport { Banner, FlatContent, ParallaxBackground } from './components';\n\nconst backgroundLogo = require('./assets/background1.jpg');\n\nfunction App() {\n  return (\n    <div>\n      <Banner />\n      <FlatContent height=\"800\" />\n      <Parallax\n        bgImage={backgroundLogo}\n        bgImageAlt=\"background\"\n        strength={700}\n        bgImageStyle={{ top: '50%', width: '100%' }}\n        style={{ height: '400px', 'background-color': 'red' }}\n      />\n      <ParallaxBackground contentHeight=\"800\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}